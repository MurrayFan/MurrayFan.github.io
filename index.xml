<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geek笔记</title>
    <link>https://blog.fanmuyong.com/</link>
    <description>Recent content on Geek笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 05 Jul 2020 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.fanmuyong.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker 原理一（隔离与限制）</title>
      <link>https://blog.fanmuyong.com/post/Docker-%E5%8E%9F%E7%90%86%E4%B8%80%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6/</link>
      <pubDate>Sun, 05 Jul 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Docker-%E5%8E%9F%E7%90%86%E4%B8%80%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6/</guid>
      <description>Docker 与传统虚拟机的区别 容器其实是一种沙盒技术。顾名思义，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了边界而不至于相互干扰；而被装进集装箱的应用，也可以被方便地搬来搬去。 这幅图的左边，画出了虚拟机的工作原理。其中，名为 Hypervisor 的软件是虚拟机最主</description>
    </item>
    
    <item>
      <title>Java 并发之 Double Check</title>
      <link>https://blog.fanmuyong.com/post/Java-%E5%B9%B6%E5%8F%91%E4%B9%8B-Double-Check/</link>
      <pubDate>Sat, 27 Jun 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java-%E5%B9%B6%E5%8F%91%E4%B9%8B-Double-Check/</guid>
      <description>在Java程序中，有时候可能需要推迟一些高开销的对象初始化操作，并且只有在使用这些对象时才进行初始化。此时，程序员可能会采用延迟初始化。但要正确实现线程安全的延迟初 始化需要一些技巧，否则很容易出现问题。比如，下面是非线程安全的延迟初始化对象的示例代码。 1 2 3 4 5 6 7 8 9 public class UnsafeLazyInitialization{ private static</description>
    </item>
    
    <item>
      <title>我是如何破解公司 400K 网速限制下载 Docker 镜像的</title>
      <link>https://blog.fanmuyong.com/post/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%85%AC%E5%8F%B8-400K-%E7%BD%91%E9%80%9F%E9%99%90%E5%88%B6%E4%B8%8B%E8%BD%BD-Docker-%E9%95%9C%E5%83%8F%E7%9A%84/</link>
      <pubDate>Tue, 16 Jun 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%85%AC%E5%8F%B8-400K-%E7%BD%91%E9%80%9F%E9%99%90%E5%88%B6%E4%B8%8B%E8%BD%BD-Docker-%E9%95%9C%E5%83%8F%E7%9A%84/</guid>
      <description>声明：私设外网 VPN 是违法行为，本文仅作技术分享，如有参考本文技术手段的违法乱纪行为，产生的一切法律后果与作者无关。 我司的办公网络限制下载 400Kb/s，对于常规办公来说足够用了，然而对于我等动辄下载几百 Mb 的 jar 包的程序猿来说简直无法忍受这龟速。前些天折腾Docker时就用技术手段小小</description>
    </item>
    
    <item>
      <title>javascript:void(0) 是什么意思</title>
      <link>https://blog.fanmuyong.com/post/javascriptvoid0-%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</link>
      <pubDate>Wed, 06 May 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/javascriptvoid0-%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</guid>
      <description>前端开发中，我们经常会用到 &amp;lt;a&amp;gt; 标签，但是想阻止他的默认行为。如点击超链接时阻止在新标签中访问 href 所定义链接的行为，此时通常会有两种做法： 1 2 1. &amp;lt;a href = &amp;#34;#&amp;#34;&amp;gt;点我&amp;lt;/a&amp;gt; 2. &amp;lt;a href = &amp;#34;javascript:void(0)&amp;#34;&amp;gt;点我&amp;lt</description>
    </item>
    
    <item>
      <title>Git 协同工作流实战二（最佳实践）</title>
      <link>https://blog.fanmuyong.com/post/Git-%E5%8D%8F%E5%90%8C%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E6%88%98%E4%BA%8C/</link>
      <pubDate>Sat, 25 Apr 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Git-%E5%8D%8F%E5%90%8C%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E6%88%98%E4%BA%8C/</guid>
      <description>概述 本流程的分支管理维护两个长期分支，Master分支为主分支；维护两类临时分支：BUG修复分支和特性分支。Stable分支总是落后于或等于Master分支的进度，且Stable分支总是由Master分支合并而来，当整个产品进行大的功能升级或者达到版本发布条件时，合并Master</description>
    </item>
    
    <item>
      <title>Git 协同工作流实战一（综合分析）</title>
      <link>https://blog.fanmuyong.com/post/Git%E5%8D%8F%E5%90%8C%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E6%88%98%E4%B8%80/</link>
      <pubDate>Fri, 24 Apr 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Git%E5%8D%8F%E5%90%8C%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E6%88%98%E4%B8%80/</guid>
      <description>概述 随着项目越来越复杂，以至于出现一种现象：开发完成的代码不敢提交到远程仓库，怕升级系统时引发问题。这也暴露出测试、管理上的缺陷。 软件系统的升级发布与开发人员和代码管理是密不可分的，良好的代码管理有助于提升团队的开发效率，使软件版本的迭代变得清晰可控，因此有必要建立一套代码分支管</description>
    </item>
    
    <item>
      <title>在 2016 年学 JavaScript 是一种什么样的体验</title>
      <link>https://blog.fanmuyong.com/post/%E5%9C%A8-2016-%E5%B9%B4%E5%AD%A6-JavaScript-%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Tue, 14 Apr 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E5%9C%A8-2016-%E5%B9%B4%E5%AD%A6-JavaScript-%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C/</guid>
      <description>嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？ 准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://blog.fanmuyong.com/about/</link>
      <pubDate>Tue, 10 Mar 2020 00:13:27 +0000</pubDate>
      
      <guid>https://blog.fanmuyong.com/about/</guid>
      <description>范明勇，笔名范木甬，现居青岛。《软件测试效率手册》作者，参编《WEB开发技术——HTML\CSS\JavaScript》，专业Java搬砖，业余前端程序猿，热爱 PS、摄影。 运营微信公众号「Geek笔记」，因微信端对技术类文章阅读不友好，转战个人博客。 自 2016 年至今在「有道云笔记」做了</description>
    </item>
    
    <item>
      <title>ES6 语法实战</title>
      <link>https://blog.fanmuyong.com/post/ES6-%E8%AF%AD%E6%B3%95%E5%AE%9E%E6%88%98/</link>
      <pubDate>Sun, 08 Mar 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/ES6-%E8%AF%AD%E6%B3%95%E5%AE%9E%E6%88%98/</guid>
      <description>ES6的&amp;hellip;展开运算符 1 2 3 4 5 6 7 let a = [1,2,3]; let b = [0, ...a, 4]; // [0,1,2,3,4] let obj = { a: 1, b: 2 }; let obj2 = { ...obj, c: 3 }; // { a:1, b:2, c:3 } let obj3 = { ...obj, a: 3 }; // { a:3, b:2 } let obj4 = {a:3,...obj}; // { a:1, b:2 } mapState store.js 1 2 3 4 5 6 7 8 9 const state = { activeFirstMenu: &amp;#39;overView&amp;#39;, loginUser: { userName: &amp;#39;&amp;#39;, deptName: &amp;#39;&amp;#39;, logined: false, loginTime: new Date() } } 未使用mapState 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
    </item>
    
    <item>
      <title>Vue 最佳实践</title>
      <link>https://blog.fanmuyong.com/post/Vue-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sat, 07 Mar 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Vue-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>1 项目目录结构 参考：Ant Design Pro https://pro.loacg.com/docs/getting-started ├── public │ └── logo.png # LOGO | └── index.html # Vue 入口模板 ├── src │ ├── api # Api ajax 等 │ ├── assets # 本地静态资源 │ ├── config # 项目基础配置，包含路由，全局设置 │ ├── components # 业务通用组件 │ ├── core # 项目引导, 全局配置初始化，依赖包引入等 │ ├── router # Vue-Router │ ├── store # Vuex │ ├──</description>
    </item>
    
    <item>
      <title>9012年了，你还在用 jQuery 吗？</title>
      <link>https://blog.fanmuyong.com/post/9012%E5%B9%B4%E4%BA%86%E4%BD%A0%E8%BF%98%E5%9C%A8%E7%94%A8-jQuery-%E5%90%97/</link>
      <pubDate>Sun, 08 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/9012%E5%B9%B4%E4%BA%86%E4%BD%A0%E8%BF%98%E5%9C%A8%E7%94%A8-jQuery-%E5%90%97/</guid>
      <description>概述 回顾过去，创建 jQuery 是为了应对浏览器之间的 JavaScript 实现差异，Internet Explorer 是当时的罪魁祸首。作为一个易于使用的解决方案，jQuery 已经被开发人员和初学者广泛接受，大多数人开始通过这个库使 JavaScript。 在 2019 年，IE8 到 IE11 的使用量已经极少。这意味着我们可以从应用程序中删除 jQuery 并</description>
    </item>
    
    <item>
      <title>DOM 这棵树</title>
      <link>https://blog.fanmuyong.com/post/DOM-%E8%BF%99%E6%A3%B5%E6%A0%91/</link>
      <pubDate>Tue, 19 Nov 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/DOM-%E8%BF%99%E6%A3%B5%E6%A0%91/</guid>
      <description>概述 DOM 全名为 Document Object Model 中文翻译为文档对象模型。它是 HTML 和 XML 文档的编程接口。它描述了一个层次化的节点树，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构、样式和内容。 一个 WEB 页面是一个文档。这个文档可以在浏览器窗口或作为 HTML 源码显示出来。DOM 是 WEB 页面的完全的面向对象表述，</description>
    </item>
    
    <item>
      <title>嵌入式数据库的冰与火</title>
      <link>https://blog.fanmuyong.com/post/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%86%B0%E4%B8%8E%E7%81%AB/</link>
      <pubDate>Wed, 05 Jun 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%86%B0%E4%B8%8E%E7%81%AB/</guid>
      <description>数据库分关系型数据库和非关系型数据库两种，今天我们来聊一聊关系型数据库中的嵌入式数据库。如无特殊说明，本文所提到的「数据库」均指关系型数据库。 什么是嵌入式数据库 嵌入式数据库 ( Embedded database ) 跟嵌入式设备是不相关的两个概念，尽管它可以运行在手机、平板电脑或树莓派上。 嵌入式数据库将 DBMS ( Database Management System )</description>
    </item>
    
    <item>
      <title>串口通信之应用篇</title>
      <link>https://blog.fanmuyong.com/post/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E5%BA%94%E7%94%A8%E7%AF%87/</link>
      <pubDate>Mon, 03 Jun 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E5%BA%94%E7%94%A8%E7%AF%87/</guid>
      <description>上一篇已经介绍了 RS-232 串口的理论基础，本文开始讲解串口的应用实例。 Linux 上的 tty 在 Bash 环境中执行 ls /dev 命令可以看到很多 tty 开头的文件名，这些文件是干什么的呢？ tty 是 Linux 给用户提供的一个常驻小程序，用于接收用户的标准输入，返回操作系统的标准输出。 Linux 将每个设备都当成一个文件来对待，举例来说，硬盘 IDE 接口的</description>
    </item>
    
    <item>
      <title>串口通信之理论篇</title>
      <link>https://blog.fanmuyong.com/post/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%90%86%E8%AE%BA%E7%AF%87/</link>
      <pubDate>Wed, 22 May 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%90%86%E8%AE%BA%E7%AF%87/</guid>
      <description>概述 串口是老式 PC 机上必备的接口，然而近年来它正逐渐淡出我们的视线，被设计上更优良的 USB 接口所取代，但是你若想跟嵌入式设备或古董计算机通讯，串口仍是最简单也是最高效的通讯方式。 此系列文章共 2 篇，笔者作为「非专业嵌入式工程师」，结合之前项目上的应用和自身理解，将分别从理论和实践两方面对</description>
    </item>
    
    <item>
      <title>布隆过滤器详解</title>
      <link>https://blog.fanmuyong.com/post/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 23 Apr 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>今天学习一个有用的算法：布隆过滤器 ( Bloom Filter )。 布隆过滤器是 1970 年由 Burton Howard Bloom 提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于快速检索一个元素是否在一个集合中。 先来了解一中数据结构——位图，因为布隆过滤器本身就是基于位图的，是对位图的一种改进。 位图 这里说的位图</description>
    </item>
    
    <item>
      <title>下载利器 Aria2</title>
      <link>https://blog.fanmuyong.com/post/%E4%B8%8B%E8%BD%BD%E5%88%A9%E5%99%A8Aria2/</link>
      <pubDate>Sun, 21 Apr 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E4%B8%8B%E8%BD%BD%E5%88%A9%E5%99%A8Aria2/</guid>
      <description>aria2 是基于 GNU 协议开源的下载文件的工具。支持的协议有 HTTP (S)、FTP、SFTP、bt、 Metalink。 亮点 多连接下载。aria2 可以从多个源/协议下载文件，并尝试利用您的最大下载带宽。真正加快您的下载体验。 轻量级。aria2 不需要太多内存和 CPU 时间。当磁盘缓存关闭时，物理内存使用量通</description>
    </item>
    
    <item>
      <title>漫谈压缩格式</title>
      <link>https://blog.fanmuyong.com/post/%E6%BC%AB%E8%B0%88%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Wed, 10 Apr 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E6%BC%AB%E8%B0%88%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F/</guid>
      <description>概述 对于刚刚接触 Linux 的人来说，一定会给 Linux 下一大堆各式各样的文件名给搞晕。别个不说，单单就压缩文件为例，我们知道在 Windows 下最常见 的压缩文件就只有两种：一是 zip，另一个是 rar。可是 Linux 就不同了，它有 .gz、.tar.gz、.bz2、.Z、.tar 等众多压缩文件名，此外 Windows 下的 zip 和 rar 也可以在</description>
    </item>
    
    <item>
      <title>深入理解RPC（二）</title>
      <link>https://blog.fanmuyong.com/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RPC%E4%BA%8C/</link>
      <pubDate>Fri, 01 Mar 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RPC%E4%BA%8C/</guid>
      <description>RMI（Remote Method Interface）远程方法调用与 RPC（Remote Procedure Call）远程过程调用有什么区别呢？ 1. 什么是 RMI？ RMI，远程方法调用（Remote Method Invocation）是 Enterprise JavaBeans 的支柱，是建立分布式 Java 应用程序的方便途径。RMI 是非常容易使用的，但是它非常的强大。 与</description>
    </item>
    
    <item>
      <title>深入理解RPC（一）</title>
      <link>https://blog.fanmuyong.com/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RPC%E4%B8%80/</link>
      <pubDate>Thu, 28 Feb 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RPC%E4%B8%80/</guid>
      <description>1. 从多态说起 面向对象有三大特征：继承、封装、多态，我们先来说说多态。 多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，</description>
    </item>
    
    <item>
      <title>Maven打包构建完全指南二（打包构建）</title>
      <link>https://blog.fanmuyong.com/post/Maven%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%E4%BA%8C/</link>
      <pubDate>Thu, 15 Nov 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Maven%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%E4%BA%8C/</guid>
      <description>打包构建 开发阶段我们一般都是在IDE里面直接运行Java代码，在项目发布部署时如何导出jar包或war包呢？ 非Maven项目 以Eclipse为例，右击项目名，选择Export选择JAR file、Runnable JAR file或WAR file即可 Maven项目 Maven的打包策略有很多</description>
    </item>
    
    <item>
      <title>Maven打包构建完全指南一（依赖管理）</title>
      <link>https://blog.fanmuyong.com/post/Maven%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%E4%B8%80/</link>
      <pubDate>Tue, 13 Nov 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Maven%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%E4%B8%80/</guid>
      <description>前言 Apache Maven是一个软件项目管理和构建工具。基于项目对象模型（POM）的概念，Maven可以从一个核心配置文件管理项目的构建，报告和文档。 虽然近年来Gradle作为后起之秀借着Android的东风大肆扩张，Maven作为主流构建工具的地位还是不可动摇的。我们可以看到很多明星项目</description>
    </item>
    
    <item>
      <title>对Spring IOC的理解</title>
      <link>https://blog.fanmuyong.com/post/%E5%AF%B9Spring-IOC%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Thu, 16 Aug 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E5%AF%B9Spring-IOC%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>1. IOC是什么 Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。 用图例说明一下，传统程序设计如图1-1，都是主动去创建相关对象然后再组合起来：</description>
    </item>
    
    <item>
      <title>通配符与正则表达式</title>
      <link>https://blog.fanmuyong.com/post/%E9%80%9A%E9%85%8D%E7%AC%A6%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Fri, 08 Jun 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E9%80%9A%E9%85%8D%E7%AC%A6%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>概述 正则表达式和通配符是两个极易混淆的概念，通常所说的通配符 ( wildcard ) 是指 Bash 操作接口的一个功能，而正则表示法则是一种字符串处理的表示方式。 通配符 从 Spring 路径匹配规则说起 作为一只 Java 程序猿，Spring 是必修课，想必多数人对 Spring 的路径匹配并不陌生，来看一段 SpringMVC 拦截器的配置。 1 2 3 4 5 &amp;lt;!-- 对静态资源</description>
    </item>
    
    <item>
      <title>Java8 的时间 API</title>
      <link>https://blog.fanmuyong.com/post/Java8%E7%9A%84%E6%97%B6%E9%97%B4API/</link>
      <pubDate>Wed, 11 Apr 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8%E7%9A%84%E6%97%B6%E9%97%B4API/</guid>
      <description>概述 Java8 一个新增的重要特性就是引入了新的时间和日期 API，它们被包含在java.time 包中。借助新的时间和日期 API 可以以更简洁的方法处理时间和日期。 在Java8 之前，所有关于时间和日期的API都存在各种使用方面的缺陷，主要有： Java 的java.util.Date和java.util.C</description>
    </item>
    
    <item>
      <title>Java8 的 Stream API</title>
      <link>https://blog.fanmuyong.com/post/Java8-%E7%9A%84-Stream-API/</link>
      <pubDate>Sat, 24 Mar 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8-%E7%9A%84-Stream-API/</guid>
      <description>为什么需要 Stream Stream 作为 Java8 的一大亮点，它与java.io包里的InputStream和OutputStream是完全不同的概念。Java8 中的Stream是对集合对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作，或者大批量数据操作。Stream API 借助于同样新出现的 Lambda 表</description>
    </item>
    
    <item>
      <title>Java8 的函数式编程</title>
      <link>https://blog.fanmuyong.com/post/Java8-%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 16 Mar 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8-%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>什么是函数式编程 简单说，「函数式编程」是一种「编程范式」，也就是如何编写程序的方法论。 它属于「结构化编程」结构化编程的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式： (1 + 2) * 3 - 4 传统的过程式编程，可能这样写： var a = 1 + 2; var b = a * 3; var</description>
    </item>
    
    <item>
      <title>Java8 接口中的 default 方法</title>
      <link>https://blog.fanmuyong.com/post/Java8-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84-default-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 14 Mar 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84-default-%E6%96%B9%E6%B3%95/</guid>
      <description>为什么要有默认方法 在 Java8 之前，接口与其实现类之间的耦合度太高了，当需要为一个接口添加方法时，所有的实现类都必须随之修改。默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现。这在 lambda 表达式作为 Java8 语言的重要特性而出现之际，为升级旧接口且保持向后兼容提供了途径。 1</description>
    </item>
    
    <item>
      <title>REST API 指南</title>
      <link>https://blog.fanmuyong.com/post/REST-API-%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 25 Nov 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/REST-API-%E6%8C%87%E5%8D%97/</guid>
      <description>什么是 REST ？ REST架构风格描述了六个约束。应用于体系结构的这些约束最初由Roy Fielding在他的博士论文中提出（参见https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm），并定义了RES</description>
    </item>
    
    <item>
      <title>SpringCloud 总览</title>
      <link>https://blog.fanmuyong.com/post/SpringCloud-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 25 Nov 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/SpringCloud-%E6%80%BB%E8%A7%88/</guid>
      <description>Spring Cloud 为构建分布式系统和微服务提供了一些通用的工具，例如：配置中心，服务注册与发现，熔断器，路由，代理，控制总线，一次性令牌，全局锁，leader选举，分布式 会话，集群状态等。 目前国内有很多公司还是使用dubbo做服务分解，但dubbo只提供了服务注册发现功能，要建立分布式系统还要</description>
    </item>
    
    <item>
      <title>Java 类加载的双亲委派机制</title>
      <link>https://blog.fanmuyong.com/post/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 21 Jul 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</guid>
      <description>双亲委派机制 Java 中存在 3 种类型的类加载器： 引导类加载器 扩展类加载器 系统类加载器 三者是的关系是：引导类加载器是扩展类加载器的父类，扩展类加载器是系统类加载器的父类。 启动类加载器(BootStrap) 主要负责加载 JVM 自身所需要的类，该加载器由 C++ 实现，加载的是&amp;lt;JAVA_HOME&amp;g</description>
    </item>
    
    <item>
      <title>Java 类的实例化顺序</title>
      <link>https://blog.fanmuyong.com/post/Java-%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Fri, 21 Jul 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java-%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</guid>
      <description>当类加载操作完成，开始进行实例化。 在实例化子类B时，先要实例化父类A 实例化父类A时，先成员实例化（非静态代码） 父类A的构造方法 子类B的成员实例化（非静态代码） 子类B的构造方法 初始化父类的静态代码—&amp;gt;初始化子类的静态代码–&amp;gt;初始化父类的非静态代码—&amp;gt;初始化父类构造</description>
    </item>
    
    <item>
      <title>MySQL 的事务隔离级别</title>
      <link>https://blog.fanmuyong.com/post/MySQL-%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Fri, 21 Jul 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/MySQL-%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>第1级别：Read Uncommitted(读取未提交内容) 所有事务都可以看到其他未提交事务的执行结果 本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少 该级别引发的问题是——脏读(Dirty Read)：读取到了未提交的数据 首先，修改隔离级别 1 2 set tx_isolation=&amp;#39;READ-UNCOMMITTED&amp;#39;; select @@tx_isolation; @@tx_isolation READ-UNCOMMITTED 事务A：启动一个</description>
    </item>
    
    <item>
      <title>软件测试基础知识扫盲（一）</title>
      <link>https://blog.fanmuyong.com/post/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%89%AB%E7%9B%B2%E4%B8%80/</link>
      <pubDate>Fri, 21 Jul 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%89%AB%E7%9B%B2%E4%B8%80/</guid>
      <description>什么是软件测试？软件测试的目的是什么？ IEEE软件测试定义为：使用人工和自动手段来运行或测试某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清预期结果与实际结果之间的差异。 该定义明确提出了软件测试以检验是否满足需求为目标。 软件测试的目的在于发现错误；一个好的测试用例在于发</description>
    </item>
    
    <item>
      <title>软件测试基础知识扫盲（二）</title>
      <link>https://blog.fanmuyong.com/post/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%89%AB%E7%9B%B2%E4%BA%8C/</link>
      <pubDate>Fri, 21 Jul 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%89%AB%E7%9B%B2%E4%BA%8C/</guid>
      <description>数据和数据库完整性测试 数据与数据库完整测试是指测试关系型数据库完整性原则以及数据合理性测试。 数据库测试主要考虑以下指标： 主键完整性：主键不能为空； 外键完整性：外键必须等于对应的主键或者为空。 数据合理性：指数据在数据库中的类型，长度，索引等是否建的比较合理。 在项目名称中，数据库和数</description>
    </item>
    
    <item>
      <title>工具</title>
      <link>https://blog.fanmuyong.com/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fanmuyong.com/tools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://blog.fanmuyong.com/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fanmuyong.com/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://blog.fanmuyong.com/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fanmuyong.com/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>