<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Geek笔记</title>
    <link>https://blog.fanmuyong.com/tags/Spring/</link>
    <description>Recent content in Spring on Geek笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 16 Aug 2018 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.fanmuyong.com/tags/Spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>对Spring IOC的理解</title>
      <link>https://blog.fanmuyong.com/post/%E5%AF%B9Spring-IOC%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Thu, 16 Aug 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E5%AF%B9Spring-IOC%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>1. IOC是什么 Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。 用图例说明一下，传统程序设计如图1-1，都是主动去创建相关对象然后再组合起来：</description>
    </item>
    
  </channel>
</rss>