<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发编程 on Geek笔记</title>
    <link>https://blog.fanmuyong.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 并发编程 on Geek笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 27 Jun 2020 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.fanmuyong.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 并发之 Double Check</title>
      <link>https://blog.fanmuyong.com/post/Java-%E5%B9%B6%E5%8F%91%E4%B9%8B-Double-Check/</link>
      <pubDate>Sat, 27 Jun 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java-%E5%B9%B6%E5%8F%91%E4%B9%8B-Double-Check/</guid>
      <description>在Java程序中，有时候可能需要推迟一些高开销的对象初始化操作，并且只有在使用这些对象时才进行初始化。此时，程序员可能会采用延迟初始化。但要正确实现线程安全的延迟初 始化需要一些技巧，否则很容易出现问题。比如，下面是非线程安全的延迟初始化对象的示例代码。 1 2 3 4 5 6 7 8 9 public class UnsafeLazyInitialization{ private static</description>
    </item>
    
  </channel>
</rss>