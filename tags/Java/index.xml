<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Geek笔记</title>
    <link>https://blog.fanmuyong.com/tags/Java/</link>
    <description>Recent content in Java on Geek笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 21 Jul 2017 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.fanmuyong.com/tags/Java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 类加载的双亲委派机制</title>
      <link>https://blog.fanmuyong.com/post/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 21 Jul 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/</guid>
      <description>双亲委派机制 Java 中存在 3 种类型的类加载器： 引导类加载器 扩展类加载器 系统类加载器 三者是的关系是：引导类加载器是扩展类加载器的父类，扩展类加载器是系统类加载器的父类。 启动类加载器(BootStrap) 主要负责加载 JVM 自身所需要的类，该加载器由 C++ 实现，加载的是&amp;lt;JAVA_HOME&amp;g</description>
    </item>
    
    <item>
      <title>Java 类的实例化顺序</title>
      <link>https://blog.fanmuyong.com/post/Java-%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Fri, 21 Jul 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java-%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</guid>
      <description>当类加载操作完成，开始进行实例化。 在实例化子类B时，先要实例化父类A 实例化父类A时，先成员实例化（非静态代码） 父类A的构造方法 子类B的成员实例化（非静态代码） 子类B的构造方法 初始化父类的静态代码—&amp;gt;初始化子类的静态代码–&amp;gt;初始化父类的非静态代码—&amp;gt;初始化父类构造</description>
    </item>
    
  </channel>
</rss>