<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lambda on 范木甬的博客</title>
    <link>https://blog.fanmuyong.com/tags/Lambda/</link>
    <description>Recent content in Lambda on 范木甬的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 16 Mar 2018 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.fanmuyong.com/tags/Lambda/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java8 的函数式编程</title>
      <link>https://blog.fanmuyong.com/post/Java8-%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 16 Mar 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8-%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>什么是函数式编程 简单说，「函数式编程」是一种「编程范式」，也就是如何编写程序的方法论。 它属于「结构化编程」结构化编程的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式： (1 + 2) * 3 - 4 传统的过程式编程，可能这样写： var a = 1 + 2; var b = a * 3; var</description>
    </item>
    
    <item>
      <title>Java8 接口中的 default 方法</title>
      <link>https://blog.fanmuyong.com/post/Java8-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84-default-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 14 Mar 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84-default-%E6%96%B9%E6%B3%95/</guid>
      <description>为什么要有默认方法 在 Java8 之前，接口与其实现类之间的耦合度太高了，当需要为一个接口添加方法时，所有的实现类都必须随之修改。默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现。这在 lambda 表达式作为 Java8 语言的重要特性而出现之际，为升级旧接口且保持向后兼容提供了途径。 1</description>
    </item>
    
  </channel>
</rss>