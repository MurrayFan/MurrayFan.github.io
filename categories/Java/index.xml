<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Geek笔记</title>
    <link>https://blog.fanmuyong.com/categories/Java/</link>
    <description>Recent content in Java on Geek笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 01 Mar 2019 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.fanmuyong.com/categories/Java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入理解RPC（二）</title>
      <link>https://blog.fanmuyong.com/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RPC%E4%BA%8C/</link>
      <pubDate>Fri, 01 Mar 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RPC%E4%BA%8C/</guid>
      <description>RMI（Remote Method Interface）远程方法调用与 RPC（Remote Procedure Call）远程过程调用有什么区别呢？ 1. 什么是 RMI？ RMI，远程方法调用（Remote Method Invocation）是 Enterprise JavaBeans 的支柱，是建立分布式 Java 应用程序的方便途径。RMI 是非常容易使用的，但是它非常的强大。 与</description>
    </item>
    
    <item>
      <title>深入理解RPC（一）</title>
      <link>https://blog.fanmuyong.com/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RPC%E4%B8%80/</link>
      <pubDate>Thu, 28 Feb 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3RPC%E4%B8%80/</guid>
      <description>1. 从多态说起 面向对象有三大特征：继承、封装、多态，我们先来说说多态。 多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，</description>
    </item>
    
    <item>
      <title>对Spring IOC的理解</title>
      <link>https://blog.fanmuyong.com/post/%E5%AF%B9Spring-IOC%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Thu, 16 Aug 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E5%AF%B9Spring-IOC%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>1. IOC是什么 Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。 用图例说明一下，传统程序设计如图1-1，都是主动去创建相关对象然后再组合起来：</description>
    </item>
    
    <item>
      <title>Java8 的时间 API</title>
      <link>https://blog.fanmuyong.com/post/Java8%E7%9A%84%E6%97%B6%E9%97%B4API/</link>
      <pubDate>Wed, 11 Apr 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8%E7%9A%84%E6%97%B6%E9%97%B4API/</guid>
      <description>概述 Java8 一个新增的重要特性就是引入了新的时间和日期 API，它们被包含在java.time 包中。借助新的时间和日期 API 可以以更简洁的方法处理时间和日期。 在Java8 之前，所有关于时间和日期的API都存在各种使用方面的缺陷，主要有： Java 的java.util.Date和java.util.C</description>
    </item>
    
    <item>
      <title>Java8 的 Stream API</title>
      <link>https://blog.fanmuyong.com/post/Java8-%E7%9A%84-Stream-API/</link>
      <pubDate>Sat, 24 Mar 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8-%E7%9A%84-Stream-API/</guid>
      <description>为什么需要 Stream Stream 作为 Java8 的一大亮点，它与java.io包里的InputStream和OutputStream是完全不同的概念。Java8 中的Stream是对集合对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作，或者大批量数据操作。Stream API 借助于同样新出现的 Lambda 表</description>
    </item>
    
    <item>
      <title>Java8 的函数式编程</title>
      <link>https://blog.fanmuyong.com/post/Java8-%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Fri, 16 Mar 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8-%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>什么是函数式编程 简单说，「函数式编程」是一种「编程范式」，也就是如何编写程序的方法论。 它属于「结构化编程」结构化编程的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式： (1 + 2) * 3 - 4 传统的过程式编程，可能这样写： var a = 1 + 2; var b = a * 3; var</description>
    </item>
    
    <item>
      <title>Java8 接口中的 default 方法</title>
      <link>https://blog.fanmuyong.com/post/Java8-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84-default-%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 14 Mar 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Java8-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84-default-%E6%96%B9%E6%B3%95/</guid>
      <description>为什么要有默认方法 在 Java8 之前，接口与其实现类之间的耦合度太高了，当需要为一个接口添加方法时，所有的实现类都必须随之修改。默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现。这在 lambda 表达式作为 Java8 语言的重要特性而出现之际，为升级旧接口且保持向后兼容提供了途径。 1</description>
    </item>
    
  </channel>
</rss>