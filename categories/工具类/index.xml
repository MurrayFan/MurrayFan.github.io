<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具类 on Geek笔记</title>
    <link>https://blog.fanmuyong.com/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/</link>
    <description>Recent content in 工具类 on Geek笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 16 Jun 2020 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.fanmuyong.com/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我是如何破解公司 400K 网速限制下载 Docker 镜像的</title>
      <link>https://blog.fanmuyong.com/post/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%85%AC%E5%8F%B8-400K-%E7%BD%91%E9%80%9F%E9%99%90%E5%88%B6%E4%B8%8B%E8%BD%BD-Docker-%E9%95%9C%E5%83%8F%E7%9A%84/</link>
      <pubDate>Tue, 16 Jun 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E5%85%AC%E5%8F%B8-400K-%E7%BD%91%E9%80%9F%E9%99%90%E5%88%B6%E4%B8%8B%E8%BD%BD-Docker-%E9%95%9C%E5%83%8F%E7%9A%84/</guid>
      <description>声明：私设外网 VPN 是违法行为，本文仅作技术分享，如有参考本文技术手段的违法乱纪行为，产生的一切法律后果与作者无关。 我司的办公网络限制下载 400Kb/s，对于常规办公来说足够用了，然而对于我等动辄下载几百 Mb 的 jar 包的程序猿来说简直无法忍受这龟速。前些天折腾Docker时就用技术手段小小</description>
    </item>
    
    <item>
      <title>Git 分支管理实战二（最佳实践）</title>
      <link>https://blog.fanmuyong.com/post/Git-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E4%BA%8C/</link>
      <pubDate>Sat, 25 Apr 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Git-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E4%BA%8C/</guid>
      <description>概述 本流程的分支管理维护两个长期分支，Master分支为主分支；维护两类临时分支：BUG修复分支和特性分支。Stable分支总是落后于或等于Master分支的进度，且Stable分支总是由Master分支合并而来，当整个产品进行大的功能升级或者达到版本发布条件时，合并Master</description>
    </item>
    
    <item>
      <title>Git 分支管理实战一（综合分析）</title>
      <link>https://blog.fanmuyong.com/post/Git-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E4%B8%80/</link>
      <pubDate>Fri, 24 Apr 2020 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Git-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E4%B8%80/</guid>
      <description>概述 随着项目越来越复杂，以至于出现一种现象：开发完成的代码不敢提交到远程仓库，怕升级系统时引发问题。这也暴露出测试、管理上的缺陷。 软件系统的升级发布与开发人员和代码管理是密不可分的，良好的代码管理有助于提升团队的开发效率，使软件版本的迭代变得清晰可控，因此有必要建立一套代码分支管</description>
    </item>
    
    <item>
      <title>下载利器 Aria2</title>
      <link>https://blog.fanmuyong.com/post/%E4%B8%8B%E8%BD%BD%E5%88%A9%E5%99%A8Aria2/</link>
      <pubDate>Sun, 21 Apr 2019 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/%E4%B8%8B%E8%BD%BD%E5%88%A9%E5%99%A8Aria2/</guid>
      <description>aria2 是基于 GNU 协议开源的下载文件的工具。支持的协议有 HTTP (S)、FTP、SFTP、bt、 Metalink。 亮点 多连接下载。aria2 可以从多个源/协议下载文件，并尝试利用您的最大下载带宽。真正加快您的下载体验。 轻量级。aria2 不需要太多内存和 CPU 时间。当磁盘缓存关闭时，物理内存使用量通</description>
    </item>
    
    <item>
      <title>Maven打包构建完全指南二（打包构建）</title>
      <link>https://blog.fanmuyong.com/post/Maven%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%E4%BA%8C/</link>
      <pubDate>Thu, 15 Nov 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Maven%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%E4%BA%8C/</guid>
      <description>打包构建 开发阶段我们一般都是在IDE里面直接运行Java代码，在项目发布部署时如何导出jar包或war包呢？ 非Maven项目 以Eclipse为例，右击项目名，选择Export选择JAR file、Runnable JAR file或WAR file即可 Maven项目 Maven的打包策略有很多</description>
    </item>
    
    <item>
      <title>Maven打包构建完全指南一（依赖管理）</title>
      <link>https://blog.fanmuyong.com/post/Maven%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%E4%B8%80/</link>
      <pubDate>Tue, 13 Nov 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.fanmuyong.com/post/Maven%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%E4%B8%80/</guid>
      <description>前言 Apache Maven是一个软件项目管理和构建工具。基于项目对象模型（POM）的概念，Maven可以从一个核心配置文件管理项目的构建，报告和文档。 虽然近年来Gradle作为后起之秀借着Android的东风大肆扩张，Maven作为主流构建工具的地位还是不可动摇的。我们可以看到很多明星项目</description>
    </item>
    
  </channel>
</rss>